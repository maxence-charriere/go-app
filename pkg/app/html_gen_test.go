package app

// Code generated by go generate; DO NOT EDIT.

import (
	"testing"
)

func TestA(t *testing.T) {
	elem := A()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Download("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.Href("hello %v", 42)
	elem.HrefLang("hello %v", 42)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Media("hello %v", 42)
	elem.Ping("hello %v", 42)
	elem.Rel("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Target("hello %v", 42)
	elem.Title("hello %v", 42)
	elem.Type("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestAbbr(t *testing.T) {
	elem := Abbr()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestAddress(t *testing.T) {
	elem := Address()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestArea(t *testing.T) {
	elem := Area()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Alt("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.Coords("hello %v", 42)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Download("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.Href("hello %v", 42)
	elem.HrefLang("hello %v", 42)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Media("hello %v", 42)
	elem.Rel("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Shape("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Target("hello %v", 42)
	elem.Title("hello %v", 42)
	elem.Type("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestArticle(t *testing.T) {
	elem := Article()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestAside(t *testing.T) {
	elem := Aside()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestAudio(t *testing.T) {
	elem := Audio()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoPlay(true)
	elem.AutoPlay(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.Controls(true)
	elem.Controls(false)
	elem.CrossOrigin("hello %v", 42)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Loop(true)
	elem.Loop(false)
	elem.Muted(true)
	elem.Muted(false)
	elem.Preload("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("hello %v", 42)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnBlur(h)
	elem.OnCanPlay(h)
	elem.OnCanPlayThrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCueChange(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnDurationChange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoadStart(h)
	elem.OnLoadedData(h)
	elem.OnLoadedMetaData(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRateChange(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeUpdate(h)
	elem.OnVolumeChange(h)
	elem.OnWaiting(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestB(t *testing.T) {
	elem := B()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestBase(t *testing.T) {
	elem := Base()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.Href("hello %v", 42)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Target("hello %v", 42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestBdi(t *testing.T) {
	elem := Bdi()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestBdo(t *testing.T) {
	elem := Bdo()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestBlockquote(t *testing.T) {
	elem := Blockquote()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Cite("hello %v", 42)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestBody(t *testing.T) {
	elem := Body()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAfterPrint(h)
	elem.OnBeforePrint(h)
	elem.OnBeforeUnload(h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnHashChange(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnMessage(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnOffline(h)
	elem.OnOnline(h)
	elem.OnPageHide(h)
	elem.OnPageShow(h)
	elem.OnPaste(h)
	elem.OnPopState(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnStorage(h)
	elem.OnSubmit(h)
	elem.OnUnload(h)
	elem.OnWheel(h)
	elem.privateBody(Text("hello"))
}

func TestBr(t *testing.T) {
	elem := Br()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestButton(t *testing.T) {
	elem := Button()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoFocus(true)
	elem.AutoFocus(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("hello %v", 42)
	elem.FormAction("hello %v", 42)
	elem.FormEncType("hello %v", 42)
	elem.FormMethod("hello %v", 42)
	elem.FormNoValidate(true)
	elem.FormNoValidate(false)
	elem.FormTarget("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Name("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Type("hello %v", 42)
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestCanvas(t *testing.T) {
	elem := Canvas()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestCaption(t *testing.T) {
	elem := Caption()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestCite(t *testing.T) {
	elem := Cite()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestCode(t *testing.T) {
	elem := Code()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestCol(t *testing.T) {
	elem := Col()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Span(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestColGroup(t *testing.T) {
	elem := ColGroup()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Span(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestData(t *testing.T) {
	elem := Data()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestDataList(t *testing.T) {
	elem := DataList()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestDd(t *testing.T) {
	elem := Dd()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestDel(t *testing.T) {
	elem := Del()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Cite("hello %v", 42)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.DateTime("hello %v", 42)
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestDetails(t *testing.T) {
	elem := Details()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Open(true)
	elem.Open(false)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnToggle(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestDfn(t *testing.T) {
	elem := Dfn()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestDialog(t *testing.T) {
	elem := Dialog()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Open(true)
	elem.Open(false)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestDiv(t *testing.T) {
	elem := Div()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestDl(t *testing.T) {
	elem := Dl()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestDt(t *testing.T) {
	elem := Dt()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestElem(t *testing.T) {
	elem := Elem("div")
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.XMLNS("http://www.w3.org/2000/svg")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestElemSelfClosing(t *testing.T) {
	elem := ElemSelfClosing("div")
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.XMLNS("http://www.w3.org/2000/svg")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestEm(t *testing.T) {
	elem := Em()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestEmbed(t *testing.T) {
	elem := Embed()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("hello %v", 42)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Type("hello %v", 42)
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnBlur(h)
	elem.OnCanPlay(h)
	elem.OnCanPlayThrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCueChange(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnDurationChange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoadStart(h)
	elem.OnLoadedData(h)
	elem.OnLoadedMetaData(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRateChange(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeUpdate(h)
	elem.OnVolumeChange(h)
	elem.OnWaiting(h)
	elem.OnWheel(h)
}

func TestFieldSet(t *testing.T) {
	elem := FieldSet()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Name("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestFigCaption(t *testing.T) {
	elem := FigCaption()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestFigure(t *testing.T) {
	elem := Figure()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestFooter(t *testing.T) {
	elem := Footer()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestForm(t *testing.T) {
	elem := Form()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AcceptCharset("hello %v", 42)
	elem.AccessKey("hello %v", 42)
	elem.Action("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoComplete(true)
	elem.AutoComplete(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.EncType("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Method("hello %v", 42)
	elem.Name("hello %v", 42)
	elem.NoValidate(true)
	elem.NoValidate(false)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Target("hello %v", 42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestH1(t *testing.T) {
	elem := H1()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestH2(t *testing.T) {
	elem := H2()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestH3(t *testing.T) {
	elem := H3()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestH4(t *testing.T) {
	elem := H4()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestH5(t *testing.T) {
	elem := H5()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestH6(t *testing.T) {
	elem := H6()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestHead(t *testing.T) {
	elem := Head()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestHeader(t *testing.T) {
	elem := Header()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestHr(t *testing.T) {
	elem := Hr()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestHtml(t *testing.T) {
	elem := Html()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.privateBody(Text("hello"))
}

func TestI(t *testing.T) {
	elem := I()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestIFrame(t *testing.T) {
	elem := IFrame()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Allow("hello %v", 42)
	elem.AllowFullscreen(true)
	elem.AllowFullscreen(false)
	elem.AllowPaymentRequest(true)
	elem.AllowPaymentRequest(false)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Loading("hello %v", 42)
	elem.Name("hello %v", 42)
	elem.ReferrerPolicy("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Sandbox("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("hello %v", 42)
	elem.SrcDoc("hello %v", 42)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestImg(t *testing.T) {
	elem := Img()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Alt("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.CrossOrigin("hello %v", 42)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.FetchPriority("hello %v", 42)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.IsMap(true)
	elem.IsMap(false)
	elem.Lang("hello %v", 42)
	elem.Loading("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Sizes("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("hello %v", 42)
	elem.SrcSet("hello %v", 42)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.UseMap("hello %v", 42)
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnBlur(h)
	elem.OnCanPlay(h)
	elem.OnCanPlayThrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCueChange(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnDurationChange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnLoadStart(h)
	elem.OnLoadedData(h)
	elem.OnLoadedMetaData(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRateChange(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeUpdate(h)
	elem.OnVolumeChange(h)
	elem.OnWaiting(h)
	elem.OnWheel(h)
}

func TestInput(t *testing.T) {
	elem := Input()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.Accept("hello %v", 42)
	elem.AccessKey("hello %v", 42)
	elem.Alt("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoComplete(true)
	elem.AutoComplete(false)
	elem.AutoFocus(true)
	elem.AutoFocus(false)
	elem.Capture("hello %v", 42)
	elem.Checked(true)
	elem.Checked(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.DirName("hello %v", 42)
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("hello %v", 42)
	elem.FormAction("hello %v", 42)
	elem.FormEncType("hello %v", 42)
	elem.FormMethod("hello %v", 42)
	elem.FormNoValidate(true)
	elem.FormNoValidate(false)
	elem.FormTarget("hello %v", 42)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.List("hello %v", 42)
	elem.Max(42)
	elem.MaxLength(42)
	elem.Min(42)
	elem.Multiple(true)
	elem.Multiple(false)
	elem.Name("hello %v", 42)
	elem.Pattern("hello %v", 42)
	elem.Placeholder("hello %v", 42)
	elem.ReadOnly(true)
	elem.ReadOnly(false)
	elem.Required(true)
	elem.Required(false)
	elem.Role("hello %v", 42)
	elem.Size(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("hello %v", 42)
	elem.Step(42)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Type("hello %v", 42)
	elem.Value(42)
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestIns(t *testing.T) {
	elem := Ins()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestKbd(t *testing.T) {
	elem := Kbd()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestLabel(t *testing.T) {
	elem := Label()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.For("hello %v", 42)
	elem.Form("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestLegend(t *testing.T) {
	elem := Legend()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestLi(t *testing.T) {
	elem := Li()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestLink(t *testing.T) {
	elem := Link()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.As("hello %v", 42)
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.CrossOrigin("hello %v", 42)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.FetchPriority("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.Href("hello %v", 42)
	elem.HrefLang("hello %v", 42)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Media("hello %v", 42)
	elem.Rel("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Sizes("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Type("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestMain(t *testing.T) {
	elem := Main()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestMap(t *testing.T) {
	elem := Map()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Name("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestMark(t *testing.T) {
	elem := Mark()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestMenu(t *testing.T) {
	elem := Menu()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestMeta(t *testing.T) {
	elem := Meta()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Charset("hello %v", 42)
	elem.Class("foo bar")
	elem.Content("hello %v", 42)
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.HTTPEquiv("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Name("hello %v", 42)
	elem.Property("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
}

func TestMeter(t *testing.T) {
	elem := Meter()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.High(42)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Low(42)
	elem.Max(42)
	elem.Min(42)
	elem.Optimum(42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestNav(t *testing.T) {
	elem := Nav()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestNoScript(t *testing.T) {
	elem := NoScript()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestObject(t *testing.T) {
	elem := Object()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.Data("hello %v", 42)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("hello %v", 42)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Name("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Type("hello %v", 42)
	elem.UseMap("hello %v", 42)
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnBlur(h)
	elem.OnCanPlay(h)
	elem.OnCanPlayThrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCueChange(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnDurationChange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoadStart(h)
	elem.OnLoadedData(h)
	elem.OnLoadedMetaData(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRateChange(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeUpdate(h)
	elem.OnVolumeChange(h)
	elem.OnWaiting(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestOl(t *testing.T) {
	elem := Ol()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Reversed(true)
	elem.Reversed(false)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Start(42)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Type("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestOptGroup(t *testing.T) {
	elem := OptGroup()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Label("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestOption(t *testing.T) {
	elem := Option()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Label("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Selected(true)
	elem.Selected(false)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestOutput(t *testing.T) {
	elem := Output()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.For("hello %v", 42)
	elem.Form("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Name("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestP(t *testing.T) {
	elem := P()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestParam(t *testing.T) {
	elem := Param()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Name("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestPicture(t *testing.T) {
	elem := Picture()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestPre(t *testing.T) {
	elem := Pre()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestProgress(t *testing.T) {
	elem := Progress()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Max(42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestQ(t *testing.T) {
	elem := Q()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Cite("hello %v", 42)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestRp(t *testing.T) {
	elem := Rp()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestRt(t *testing.T) {
	elem := Rt()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestRuby(t *testing.T) {
	elem := Ruby()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestS(t *testing.T) {
	elem := S()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestSamp(t *testing.T) {
	elem := Samp()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestScript(t *testing.T) {
	elem := Script()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Async(true)
	elem.Async(false)
	elem.Attr("foo", "bar")
	elem.Charset("hello %v", 42)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.CrossOrigin("hello %v", 42)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Defer(true)
	elem.Defer(false)
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("hello %v", 42)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Type("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnLoad(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestSection(t *testing.T) {
	elem := Section()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestSelect(t *testing.T) {
	elem := Select()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoFocus(true)
	elem.AutoFocus(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Multiple(true)
	elem.Multiple(false)
	elem.Name("hello %v", 42)
	elem.Required(true)
	elem.Required(false)
	elem.Role("hello %v", 42)
	elem.Size(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestSmall(t *testing.T) {
	elem := Small()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestSource(t *testing.T) {
	elem := Source()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Media("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Sizes("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("hello %v", 42)
	elem.SrcSet("hello %v", 42)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Type("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestSpan(t *testing.T) {
	elem := Span()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestStrong(t *testing.T) {
	elem := Strong()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestStyle(t *testing.T) {
	elem := Style()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Media("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Type("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestSub(t *testing.T) {
	elem := Sub()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestSummary(t *testing.T) {
	elem := Summary()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestSup(t *testing.T) {
	elem := Sup()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestTable(t *testing.T) {
	elem := Table()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestTBody(t *testing.T) {
	elem := TBody()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestTd(t *testing.T) {
	elem := Td()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ColSpan(42)
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Headers("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Rowspan(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestTemplate(t *testing.T) {
	elem := Template()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestTextarea(t *testing.T) {
	elem := Textarea()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoFocus(true)
	elem.AutoFocus(false)
	elem.Class("foo bar")
	elem.Cols(42)
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.DirName("hello %v", 42)
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.MaxLength(42)
	elem.Name("hello %v", 42)
	elem.Placeholder("hello %v", 42)
	elem.ReadOnly(true)
	elem.ReadOnly(false)
	elem.Required(true)
	elem.Required(false)
	elem.Role("hello %v", 42)
	elem.Rows(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Wrap("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestTFoot(t *testing.T) {
	elem := TFoot()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestTh(t *testing.T) {
	elem := Th()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.Abbr("hello %v", 42)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ColSpan(42)
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Headers("hello %v", 42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Rowspan(42)
	elem.Scope("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestTHead(t *testing.T) {
	elem := THead()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestTime(t *testing.T) {
	elem := Time()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.DateTime("hello %v", 42)
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestTitle(t *testing.T) {
	elem := Title()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestTr(t *testing.T) {
	elem := Tr()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestU(t *testing.T) {
	elem := U()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestUl(t *testing.T) {
	elem := Ul()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestVar(t *testing.T) {
	elem := Var()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestVideo(t *testing.T) {
	elem := Video()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoPlay(true)
	elem.AutoPlay(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.Controls(true)
	elem.Controls(false)
	elem.CrossOrigin("hello %v", 42)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Loop(true)
	elem.Loop(false)
	elem.Muted(true)
	elem.Muted(false)
	elem.Poster("hello %v", 42)
	elem.Preload("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("hello %v", 42)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnBlur(h)
	elem.OnCanPlay(h)
	elem.OnCanPlayThrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCueChange(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnDurationChange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoadStart(h)
	elem.OnLoadedData(h)
	elem.OnLoadedMetaData(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRateChange(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeUpdate(h)
	elem.OnVolumeChange(h)
	elem.OnWaiting(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}

func TestWbr(t *testing.T) {
	elem := Wbr()
	elem.setDepth(1)
	elem.setJSElement(nil)
	elem.setAttrs(nil)
	elem.setEvents(nil)
	elem.setParent(nil)
	elem.setBody(nil)
	elem.AccessKey("hello %v", 42)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DataSets(map[string]any{"foo": "bar"})
	elem.Dir("hello %v", 42)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("hello %v", 42)
	elem.Lang("hello %v", 42)
	elem.Role("hello %v", 42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("margin", "%vpx", 42)
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("hello %v", 42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
	elem.Textf("hello %s", "Maxence")
}
